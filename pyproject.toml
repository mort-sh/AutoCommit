[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "autocommit"
version = "1.0.0"
description = "AutoCommit: AI-powered Git commit message generator that automates commit messages using OpenAI API"
readme = "README.md"
requires-python = ">=3.12"
license = { file = "LICENSE" }
authors = [{ name = "mort-sh" }]
keywords = ["git", "commit", "ai", "openai", "automation"]
dependencies = [
    "openai>=1.68.2",
    "argparse>=1.4.0",
    "rich>=13.7.0",
    "whatthepatch>=1.0.7",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=4.1.0",
    "pyinstaller>=6.5.0",
    "pip-audit>=2.8.0",
    "ruff>=0.11.5",
    "coverage>=7.7.1",
    "mypy>=1.15.0",
    "pytest-rich>=0.2.0",
]

[project.urls]
"Homepage" = "https://github.com/mort-sh/AutomaticGitCommit"
"Bug Tracker" = "https://github.com/mort-sh/AutomaticGitCommit/issues"

[project.scripts]
# Standard scripts
autocommit = "autocommit.cli.cli:main"
proj_build = "scripts.build:main"
proj_clean = "scripts.clean:main"
proj_release = "scripts.release:main"
proj_list = "scripts.list:main"
proj_test = "scripts.test:main"

# Project-specific scripts
proj_datagen = "scripts.generate_dummy_data:main"


[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["autocommit"]
force-sort-within-sections = true



[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.mypy]
strict = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false


[tool.coverage.run]
source = ["tests", "autocommits"]

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_also = [
    # This is only executed while typechecking
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
    "logger.debug",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    # This is a warning that is expected to happen: we have an async filter that raises an exception
    "ignore:coroutine 'test_async_input_filter_fails.<locals>.invalid_input_filter' was never awaited:RuntimeWarning",
]
markers = [
    "allow_call_model_methods: mark test as allowing calls to real model implementations",
]

[tool.inline-snapshot]
format-command = "ruff format --stdin-filename {filename}"





# [tool.pytest.ini_options]
# testpaths = ["tests"]
# python_files = "test_*.py"
# python_functions = "test_*"

# [tool.coverage.run]
# source = ["autocommit"]


# [tool.ruff]
# # Set line length to 100 characters
# line-length = 100
# # Target Python version
# target-version = "py312"
# exclude = [
#     ".bzr",
#     ".direnv",
#     ".eggs",
#     ".git",
#     ".git-rewrite",
#     ".hg",
#     ".ipynb_checkpoints",
#     ".mypy_cache",
#     ".nox",
#     ".pants.d",
#     ".pyenv",
#     ".pytest_cache",
#     ".pytype",
#     ".ruff_cache",
#     ".svn",
#     ".tox",
#     ".venv",
#     "__pypackages__",
#     "_build",
#     "buck-out",
#     "build",
#     "dist",
#     "node_modules",
#     "venv",
#     "*/migrations/*",
# ]
# # Enable auto-fixing
# fix = true

# [tool.ruff.lint]
# select = [
#     "E",
#     "W",
#     "F",
#     "I",
#     "C90",
#     "N",
#     "UP",
#     "B",
#     "A",
#     "SIM",
#     "T20",
#     "PYI",
#     "PL",
#     "RUF",
# ]
# ignore = ["PLR0913", "PLR0915", "PLR2004", "PLW2901", "T201"]
# fixable = ["ALL"]
# unfixable = []
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# [tool.ruff.lint.mccabe]
# max-complexity = 12

# [tool.ruff.lint.isort]
# known-first-party = ["autocommit"]
# force-sort-within-sections = true

# [tool.ruff.format]
# quote-style = "double"
# indent-style = "space"
# indent-width = 4
# skip-magic-trailing-comma = false
# line-ending = "auto"
# docstring-code-format = true
