name: Manual Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Git tag for this release (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build-executables:
    name: Build Executable (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: autocommit-windows
            executable_name: autocommit.exe
          - os: macos-latest
            artifact_name: autocommit-macos
            executable_name: autocommit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Use a specific version consistent with project requirements

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Create virtual environment
        run: uv venv # Creates .venv and uv automatically uses it

      - name: Install dependencies (incl. PyInstaller)
        run: uv pip install -e .[dev]

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv # Default uv cache location
          # Use uv.lock hash as the primary key
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          # Fallback key if lock file hasn't changed
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Build executable with build script
        run: |
          # Use cross-platform way to activate virtual environment
          if [ "$RUNNER_OS" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          project_build --executable
        shell: bash # Explicitly use bash

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.executable_name }}

  create-github-release:
    name: Create GitHub Release
    needs: build-executables
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          name: Release ${{ github.event.inputs.tag_name }}
          # Use find to get all executable files from the downloaded artifacts
          # Adjust the find command if artifact structure differs
          files: |
            artifacts/autocommit-windows/autocommit.exe
            artifacts/autocommit-macos/autocommit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
